/**
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.164.8
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.plaid.apis

import com.fasterxml.jackson.databind.ObjectMapper
import io.ktor.client.*
import io.ktor.client.engine.*
import net.djvk.fireflyPlaidConnector2.api.plaid.infrastructure.*
import net.djvk.fireflyPlaidConnector2.api.plaid.models.*
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import java.io.File

@Component
open class PlaidApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: ObjectMapper.() -> Unit = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

    /**
     * Retrieve real-time balance data
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link.
     * @param accountsBalanceGetRequest
     * @return AccountsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsBalanceGet(accountsBalanceGetRequest: AccountsBalanceGetRequest): HttpResponse<AccountsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = accountsBalanceGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/accounts/balance/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve accounts
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest
     * @return AccountsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun accountsGet(accountsGetRequest: AccountsGetRequest): HttpResponse<AccountsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = accountsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/accounts/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest
     * @return ApplicationGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun applicationGet(applicationGetRequest: ApplicationGetRequest): HttpResponse<ApplicationGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = applicationGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/application/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest
     * @return AssetReportAuditCopyCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest): HttpResponse<AssetReportAuditCopyCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportAuditCopyCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/audit_copy/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an Asset Report Audit Copy
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest
     * @return AssetReportGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportAuditCopyGet(assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest): HttpResponse<AssetReportGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportAuditCopyGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/audit_copy/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove Asset Report Audit Copy
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest
     * @return AssetReportAuditCopyRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest): HttpResponse<AssetReportAuditCopyRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportAuditCopyRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/audit_copy/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create an Asset Report
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest
     * @return AssetReportCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportCreate(assetReportCreateRequest: AssetReportCreateRequest): HttpResponse<AssetReportCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest
     * @return AssetReportFilterResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportFilter(assetReportFilterRequest: AssetReportFilterRequest): HttpResponse<AssetReportFilterResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportFilterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/filter",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an Asset Report
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest
     * @return AssetReportGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportGet(assetReportGetRequest: AssetReportGetRequest): HttpResponse<AssetReportGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a PDF Asset Report
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest
     * @return java.io.File
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportPdfGet(assetReportPDFGetRequest: AssetReportPDFGetRequest): HttpResponse<File> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportPDFGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/pdf/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest
     * @return AssetReportRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRefresh(assetReportRefreshRequest: AssetReportRefreshRequest): HttpResponse<AssetReportRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create an &#x60;asset_relay_token&#x60; to share an Asset Report with a partner client
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant access to an Asset Report to a third party, use the &#x60;/asset_report/relay/create&#x60; endpoint to create an &#x60;asset_relay_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;secondary_client_id&#x60;, for example &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;asset_relay_token&#x60; for each third party to whom you want to grant access to the Report.
     * @param assetReportRelayCreateRequest
     * @return AssetReportRelayCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRelayCreate(assetReportRelayCreateRequest: AssetReportRelayCreateRequest): HttpResponse<AssetReportRelayCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRelayCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/relay/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an Asset Report that was shared with you
     * &#x60;/asset_report/relay/get&#x60; allows third parties to get an Asset Report that was shared with them, using an &#x60;asset_relay_token&#x60; that was created by the report owner.
     * @param assetReportRelayGetRequest
     * @return AssetReportGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRelayGet(assetReportRelayGetRequest: AssetReportRelayGetRequest): HttpResponse<AssetReportGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRelayGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/relay/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh a Relay Token&#39;s Asset Report
     * The &#x60;/asset_report/relay/refresh&#x60; endpoint allows third parties to refresh an Asset Report that was relayed to them, using an &#x60;asset_relay_token&#x60; that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available.
     * @param assetReportRelayRefreshRequest
     * @return AssetReportRelayRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRelayRefresh(assetReportRelayRefreshRequest: AssetReportRelayRefreshRequest): HttpResponse<AssetReportRelayRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRelayRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/relay/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove Asset Report Relay Token
     * The &#x60;/asset_report/relay/remove&#x60; endpoint allows you to invalidate an &#x60;asset_relay_token&#x60;, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the &#x60;asset_relay_token&#x60; gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given &#x60;asset_relay_token.
     * @param assetReportRelayRemoveRequest
     * @return AssetReportRelayRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRelayRemove(assetReportRelayRemoveRequest: AssetReportRelayRemoveRequest): HttpResponse<AssetReportRelayRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRelayRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/relay/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Delete an Asset Report
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest
     * @return AssetReportRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun assetReportRemove(assetReportRemoveRequest: AssetReportRemoveRequest): HttpResponse<AssetReportRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = assetReportRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/asset_report/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve auth data
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that &#x60;/auth/get&#x60; will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest
     * @return AuthGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authGet(authGetRequest: AuthGetRequest): HttpResponse<AuthGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = authGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get balance of your Bank Transfer account
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest
     * @return BankTransferBalanceGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferBalanceGet(bankTransferBalanceGetRequest: BankTransferBalanceGetRequest): HttpResponse<BankTransferBalanceGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferBalanceGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/balance/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Cancel a bank transfer
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest
     * @return BankTransferCancelResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferCancel(bankTransferCancelRequest: BankTransferCancelRequest): HttpResponse<BankTransferCancelResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferCancelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/cancel",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a bank transfer
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest
     * @return BankTransferCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferCreate(bankTransferCreateRequest: BankTransferCreateRequest): HttpResponse<BankTransferCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List bank transfer events
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of bank transfer events based on specified filter criteria.
     * @param bankTransferEventListRequest
     * @return BankTransferEventListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferEventList(bankTransferEventListRequest: BankTransferEventListRequest): HttpResponse<BankTransferEventListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferEventListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/event/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Sync bank transfer events
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 bank transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/bank_transfer/event/sync&#x60; endpoint to guarantee you have seen all bank transfer events.
     * @param bankTransferEventSyncRequest
     * @return BankTransferEventSyncResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferEventSync(bankTransferEventSyncRequest: BankTransferEventSyncRequest): HttpResponse<BankTransferEventSyncResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferEventSyncRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/event/sync",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a bank transfer
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest
     * @return BankTransferGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferGet(bankTransferGetRequest: BankTransferGetRequest): HttpResponse<BankTransferGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List bank transfers
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers.
     * @param bankTransferListRequest
     * @return BankTransferListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferList(bankTransferListRequest: BankTransferListRequest): HttpResponse<BankTransferListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest
     * @return BankTransferMigrateAccountResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferMigrateAccount(bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest): HttpResponse<BankTransferMigrateAccountResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferMigrateAccountRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/migrate_account",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a sweep
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest
     * @return BankTransferSweepGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferSweepGet(bankTransferSweepGetRequest: BankTransferSweepGetRequest): HttpResponse<BankTransferSweepGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferSweepGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/sweep/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List sweeps
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest
     * @return BankTransferSweepListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bankTransferSweepList(bankTransferSweepListRequest: BankTransferSweepListRequest): HttpResponse<BankTransferSweepListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = bankTransferSweepListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/bank_transfer/sweep/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get Categories
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body
     * @return CategoriesGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun categoriesGet(body: kotlin.Any): HttpResponse<CategoriesGetResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/categories/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create payment token
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest
     * @return PaymentInitiationPaymentTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createPaymentToken(paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest): HttpResponse<PaymentInitiationPaymentTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationPaymentTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/payment/token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
     * @param requestBody
     * @return AssetReportFreddieGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditAssetReportFreddieMacGet(requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>): HttpResponse<AssetReportFreddieGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = requestBody

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/asset_report/freddie_mac/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create Asset or Income Report Audit Copy Token
     * Plaid can provide an Audit Copy token of an Asset Report and/or Income Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  To grant access to an Audit Copy token, use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param creditAuditCopyTokenCreateRequest
     * @return CreditAuditCopyTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest: CreditAuditCopyTokenCreateRequest): HttpResponse<CreditAuditCopyTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditAuditCopyTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/audit_copy_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve information from the bank accounts used for income verification
     * &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
     * @param creditBankIncomeGetRequest
     * @return CreditBankIncomeGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditBankIncomeGet(creditBankIncomeGetRequest: CreditBankIncomeGetRequest): HttpResponse<CreditBankIncomeGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditBankIncomeGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/bank_income/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve information from the bank accounts used for income verification in PDF format
     * &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
     * @param creditBankIncomePDFGetRequest
     * @return java.io.File
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditBankIncomePdfGet(creditBankIncomePDFGetRequest: CreditBankIncomePDFGetRequest): HttpResponse<File> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditBankIncomePDFGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/bank_income/pdf/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh a user&#39;s bank income information
     * &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
     * @param creditBankIncomeRefreshRequest
     * @return CreditBankIncomeRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditBankIncomeRefresh(creditBankIncomeRefreshRequest: CreditBankIncomeRefreshRequest): HttpResponse<CreditBankIncomeRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditBankIncomeRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/bank_income/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a summary of an individual&#39;s employment information
     * &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
     * @param creditEmploymentGetRequest
     * @return CreditEmploymentGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditEmploymentGet(creditEmploymentGetRequest: CreditEmploymentGetRequest): HttpResponse<CreditEmploymentGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditEmploymentGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/employment/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a user&#39;s payroll information
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @param creditPayrollIncomeGetRequest
     * @return CreditPayrollIncomeGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditPayrollIncomeGet(creditPayrollIncomeGetRequest: CreditPayrollIncomeGetRequest): HttpResponse<CreditPayrollIncomeGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditPayrollIncomeGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/payroll_income/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Check income verification eligibility and optimize conversion
     * &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.
     * @param creditPayrollIncomePrecheckRequest
     * @return CreditPayrollIncomePrecheckResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest: CreditPayrollIncomePrecheckRequest): HttpResponse<CreditPayrollIncomePrecheckResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditPayrollIncomePrecheckRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/payroll_income/precheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh a digital payroll income verification
     * &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
     * @param creditPayrollIncomeRefreshRequest
     * @return CreditPayrollIncomeRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest: CreditPayrollIncomeRefreshRequest): HttpResponse<CreditPayrollIncomeRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditPayrollIncomeRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/payroll_income/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a &#x60;relay_token&#x60; to share an Asset Report with a partner client
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant access to an Asset Report to a third party, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;secondary_client_id&#x60;, for example &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party to whom you want to grant access to the Report.
     * @param creditRelayCreateRequest
     * @return CreditRelayCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditRelayCreate(creditRelayCreateRequest: CreditRelayCreateRequest): HttpResponse<CreditRelayCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditRelayCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/relay/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve the reports associated with a Relay token that was shared with you
     * &#x60;/credit/relay/get&#x60; allows third parties to get a report that was shared with them, using an &#x60;relay_token&#x60; that was created by the report owner.
     * @param creditRelayGetRequest
     * @return AssetReportGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditRelayGet(creditRelayGetRequest: CreditRelayGetRequest): HttpResponse<AssetReportGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditRelayGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/relay/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh a report of a Relay Token
     * The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh an report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created based on the old one, but with the most recent data available.
     * @param creditRelayRefreshRequest
     * @return CreditRelayRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditRelayRefresh(creditRelayRefreshRequest: CreditRelayRefreshRequest): HttpResponse<CreditRelayRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditRelayRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/relay/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove Credit Relay Token
     * The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;, meaning the third party holding the token will no longer be able to use it to access the reports to which the &#x60;relay_token&#x60; gives access to. The report, items associated with it, and other Relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token.
     * @param creditRelayRemoveRequest
     * @return CreditRelayRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditRelayRemove(creditRelayRemoveRequest: CreditRelayRemoveRequest): HttpResponse<CreditRelayRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditRelayRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/relay/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove an Audit Copy token
     * The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param creditAuditCopyTokenRemoveRequest
     * @return CreditAuditCopyTokenRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest: CreditAuditCopyTokenRemoveRequest): HttpResponse<CreditAuditCopyTokenRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = creditAuditCopyTokenRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/credit/audit_copy_token/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List dashboard users
     * List all dashboard users associated with your account.
     * @param listDashboardUserRequest
     * @return PaginatedDashboardUserListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashboardUserList(listDashboardUserRequest: ListDashboardUserRequest): HttpResponse<PaginatedDashboardUserListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listDashboardUserRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/dashboard_user/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a dashboard user
     * Retrieve information about a dashboard user.
     * @param getDashboardUserRequest
     * @return DashboardUserResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun dashobardUserGet(getDashboardUserRequest: GetDashboardUserRequest): HttpResponse<DashboardUserResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getDashboardUserRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/dashboard_user/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest
     * @return DepositSwitchAltCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun depositSwitchAltCreate(depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest): HttpResponse<DepositSwitchAltCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = depositSwitchAltCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/deposit_switch/alt/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest
     * @return DepositSwitchCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun depositSwitchCreate(depositSwitchCreateRequest: DepositSwitchCreateRequest): HttpResponse<DepositSwitchCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = depositSwitchCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/deposit_switch/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest
     * @return DepositSwitchGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun depositSwitchGet(depositSwitchGetRequest: DepositSwitchGetRequest): HttpResponse<DepositSwitchGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = depositSwitchGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/deposit_switch/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
     * @param depositSwitchTokenCreateRequest
     * @return DepositSwitchTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun depositSwitchTokenCreate(depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest): HttpResponse<DepositSwitchTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = depositSwitchTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/deposit_switch/token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Search employer database
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest
     * @return EmployersSearchResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employersSearch(employersSearchRequest: EmployersSearchRequest): HttpResponse<EmployersSearchResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = employersSearchRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/employers/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Retrieve a summary of an individual&#39;s employment information
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
     * @param employmentVerificationGetRequest
     * @return EmploymentVerificationGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun employmentVerificationGet(employmentVerificationGetRequest: EmploymentVerificationGetRequest): HttpResponse<EmploymentVerificationGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = employmentVerificationGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/employment/verification/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve identity data
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @param identityGetRequest
     * @return IdentityGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityGet(identityGetRequest: IdentityGetRequest): HttpResponse<IdentityGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = identityGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve identity match score
     * The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityMatchRequest
     * @return IdentityMatchResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityMatch(identityMatchRequest: IdentityMatchRequest): HttpResponse<IdentityMatchResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = identityMatchRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity/match",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a new identity verification
     * Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code.
     * @param identityVerificationCreateRequest
     * @return IdentityVerificationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityVerificationCreate(identityVerificationCreateRequest: IdentityVerificationCreateRequest): HttpResponse<IdentityVerificationResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = identityVerificationCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity_verification/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve Identity Verification
     * Retrieve a previously created identity verification
     * @param getIdentityVerificationRequest
     * @return IdentityVerificationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityVerificationGet(getIdentityVerificationRequest: GetIdentityVerificationRequest): HttpResponse<IdentityVerificationResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getIdentityVerificationRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity_verification/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List Identity Verifications
     * Filter and list Identity Verifications created by your account
     * @param listIdentityVerificationRequest
     * @return PaginatedIdentityVerificationListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityVerificationList(listIdentityVerificationRequest: ListIdentityVerificationRequest): HttpResponse<PaginatedIdentityVerificationListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listIdentityVerificationRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity_verification/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retry an Identity Verification
     * Allow a customer to retry their identity verification
     * @param identityVerificationRetryRequest
     * @return IdentityVerificationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun identityVerificationRetry(identityVerificationRetryRequest: IdentityVerificationRetryRequest): HttpResponse<IdentityVerificationResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = identityVerificationRetryRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/identity_verification/retry",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Create an income verification instance
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
     * @param incomeVerificationCreateRequest
     * @return IncomeVerificationCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationCreate(incomeVerificationCreateRequest: IncomeVerificationCreateRequest): HttpResponse<IncomeVerificationCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = incomeVerificationCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Download the original documents used for income verification
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest
     * @return java.io.File
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest): HttpResponse<File> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = incomeVerificationDocumentsDownloadRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/documents/download",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationPaystubsGetRequest
     * @return IncomeVerificationPaystubsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest): HttpResponse<IncomeVerificationPaystubsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = incomeVerificationPaystubsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/paystubs/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
     * @param incomeVerificationPrecheckRequest
     * @return IncomeVerificationPrecheckResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationPrecheck(incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest): HttpResponse<IncomeVerificationPrecheckResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = incomeVerificationPrecheckRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/precheck",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Refresh an income verification
     * &#x60;/income/verification/refresh&#x60; refreshes a given income verification.
     * @param incomeVerificationRefreshRequest
     * @return IncomeVerificationRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationRefresh(incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest): HttpResponse<IncomeVerificationRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = incomeVerificationRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param requestBody
     * @return IncomeVerificationTaxformsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun incomeVerificationTaxformsGet(requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>): HttpResponse<IncomeVerificationTaxformsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = requestBody

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/income/verification/taxforms/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest
     * @return InstitutionsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun institutionsGet(institutionsGetRequest: InstitutionsGetRequest): HttpResponse<InstitutionsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = institutionsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/institutions/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
     * @param institutionsGetByIdRequest
     * @return InstitutionsGetByIdResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun institutionsGetById(institutionsGetByIdRequest: InstitutionsGetByIdRequest): HttpResponse<InstitutionsGetByIdResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = institutionsGetByIdRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/institutions/get_by_id",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead.
     * @param institutionsSearchRequest
     * @return InstitutionsSearchResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun institutionsSearch(institutionsSearchRequest: InstitutionsSearchRequest): HttpResponse<InstitutionsSearchResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = institutionsSearchRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/institutions/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get Investment holdings
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest
     * @return InvestmentsHoldingsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun investmentsHoldingsGet(investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest): HttpResponse<InvestmentsHoldingsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = investmentsHoldingsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/investments/holdings/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get investment transactions
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.
     * @param investmentsTransactionsGetRequest
     * @return InvestmentsTransactionsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun investmentsTransactionsGet(investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest): HttpResponse<InvestmentsTransactionsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = investmentsTransactionsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/investments/transactions/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Invalidate access_token
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;.
     * @param itemAccessTokenInvalidateRequest
     * @return ItemAccessTokenInvalidateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest): HttpResponse<ItemAccessTokenInvalidateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemAccessTokenInvalidateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/access_token/invalidate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param itemApplicationListRequest
     * @return ItemApplicationListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemApplicationList(itemApplicationListRequest: ItemApplicationListRequest): HttpResponse<ItemApplicationListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemApplicationListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/application/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest
     * @return ItemApplicationScopesUpdateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest): HttpResponse<ItemApplicationScopesUpdateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemApplicationScopesUpdateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/application/scopes/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create public token
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest
     * @return ItemPublicTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemCreatePublicToken(itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest): HttpResponse<ItemPublicTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemPublicTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/public_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param itemGetRequest
     * @return ItemGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemGet(itemGetRequest: ItemGetRequest): HttpResponse<ItemGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Import Item
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest
     * @return ItemImportResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemImport(itemImportRequest: ItemImportRequest): HttpResponse<ItemImportResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemImportRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/import",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Exchange public token for an access token
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest
     * @return ItemPublicTokenExchangeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemPublicTokenExchange(itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest): HttpResponse<ItemPublicTokenExchangeResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemPublicTokenExchangeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/public_token/exchange",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove an Item
     * The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest
     * @return ItemRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemRemove(itemRemoveRequest: ItemRemoveRequest): HttpResponse<ItemRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update Webhook URL
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest
     * @return ItemWebhookUpdateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun itemWebhookUpdate(itemWebhookUpdateRequest: ItemWebhookUpdateRequest): HttpResponse<ItemWebhookUpdateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = itemWebhookUpdateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/item/webhook/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve Liabilities data
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest
     * @return LiabilitiesGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun liabilitiesGet(liabilitiesGetRequest: LiabilitiesGetRequest): HttpResponse<LiabilitiesGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = liabilitiesGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/liabilities/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create link delivery session
     * Use the &#x60;/link_delivery/create&#x60; endpoint to create a Link Delivery session.
     * @param linkDeliveryCreateRequest
     * @return LinkDeliveryCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun linkDeliveryCreate(linkDeliveryCreateRequest: LinkDeliveryCreateRequest): HttpResponse<LinkDeliveryCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = linkDeliveryCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/link_delivery/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get link delivery session
     * Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Link Delivery session.
     * @param linkDeliveryGetRequest
     * @return LinkDeliveryGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun linkDeliveryGet(linkDeliveryGetRequest: LinkDeliveryGetRequest): HttpResponse<LinkDeliveryGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = linkDeliveryGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/link_delivery/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create Link Token
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest
     * @return LinkTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun linkTokenCreate(linkTokenCreateRequest: LinkTokenCreateRequest): HttpResponse<LinkTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = linkTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/link/token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get Link Token
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest
     * @return LinkTokenGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun linkTokenGet(linkTokenGetRequest: LinkTokenGetRequest): HttpResponse<LinkTokenGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = linkTokenGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/link/token/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Creates a new client for a reseller partner end customer.
     * The &#x60;/partner/v1/customers/create&#x60; endpoint is used by reseller partners to create an end customer client.
     * @param partnerCustomersCreateRequest
     * @return PartnerCustomersCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun partnerCustomersCreate(partnerCustomersCreateRequest: PartnerCustomersCreateRequest): HttpResponse<PartnerCustomersCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = partnerCustomersCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/beta/partner/v1/customers/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create payment consent
     * The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @param paymentInitiationConsentCreateRequest
     * @return PaymentInitiationConsentCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest: PaymentInitiationConsentCreateRequest): HttpResponse<PaymentInitiationConsentCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationConsentCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/consent/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get payment consent
     * The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @param paymentInitiationConsentGetRequest
     * @return PaymentInitiationConsentGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationConsentGet(paymentInitiationConsentGetRequest: PaymentInitiationConsentGetRequest): HttpResponse<PaymentInitiationConsentGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationConsentGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/consent/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Execute a single payment using consent
     * The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
     * @param paymentInitiationConsentPaymentExecuteRequest
     * @return PaymentInitiationConsentPaymentExecuteResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest: PaymentInitiationConsentPaymentExecuteRequest): HttpResponse<PaymentInitiationConsentPaymentExecuteResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationConsentPaymentExecuteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/consent/payment/execute",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Revoke payment consent
     * The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @param paymentInitiationConsentRevokeRequest
     * @return PaymentInitiationConsentRevokeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest: PaymentInitiationConsentRevokeRequest): HttpResponse<PaymentInitiationConsentRevokeResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationConsentRevokeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/consent/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a payment
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest
     * @return PaymentInitiationPaymentCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest): HttpResponse<PaymentInitiationPaymentCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationPaymentCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/payment/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get payment details
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest
     * @return PaymentInitiationPaymentGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest): HttpResponse<PaymentInitiationPaymentGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationPaymentGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/payment/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List payments
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest
     * @return PaymentInitiationPaymentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationPaymentList(paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest): HttpResponse<PaymentInitiationPaymentListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationPaymentListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/payment/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Reverse an existing payment
     * Reverse a previously settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded and only full payment refunds are currently supported. To power partial refunds, use &#x60;/wallet/transaction/execute&#x60;, where you can specify the exact amount for a payout to an end user.  A payment can only be reversed once and will be refunded back to the same source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account. The refund will be initiated from the same virtual account that the payment was paid into.
     * @param paymentInitiationPaymentReverseRequest
     * @return PaymentInitiationPaymentReverseResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest): HttpResponse<PaymentInitiationPaymentReverseResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationPaymentReverseRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/payment/reverse",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;.
     * @param paymentInitiationRecipientCreateRequest
     * @return PaymentInitiationRecipientCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest): HttpResponse<PaymentInitiationRecipientCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationRecipientCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/recipient/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest
     * @return PaymentInitiationRecipientGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest): HttpResponse<PaymentInitiationRecipientGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationRecipientGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/recipient/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List payment recipients
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest
     * @return PaymentInitiationRecipientListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentInitiationRecipientList(paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest): HttpResponse<PaymentInitiationRecipientListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentInitiationRecipientListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_initiation/recipient/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create payment profile
     * Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile, the return value is a Payment Profile ID. Attach it to the link token create request and the link workflow will then \&quot;activate\&quot; this Payment Profile if the linkage is successful. It can then be used to create Transfers using &#x60;/transfer/authorization/create&#x60; and /transfer/create&#x60;.
     * @param paymentProfileCreateRequest
     * @return PaymentProfileCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentProfileCreate(paymentProfileCreateRequest: PaymentProfileCreateRequest): HttpResponse<PaymentProfileCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentProfileCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_profile/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get payment profile
     * Use the &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
     * @param paymentProfileGetRequest
     * @return PaymentProfileGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentProfileGet(paymentProfileGetRequest: PaymentProfileGetRequest): HttpResponse<PaymentProfileGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentProfileGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_profile/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove payment profile
     * Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @param paymentProfileRemoveRequest
     * @return PaymentProfileRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun paymentProfileRemove(paymentProfileRemoveRequest: PaymentProfileRemoveRequest): HttpResponse<PaymentProfileRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = paymentProfileRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/payment_profile/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest
     * @return ProcessorTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest): HttpResponse<ProcessorTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorApexProcessorTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/apex/processor_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve Auth data
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
     * @param processorAuthGetRequest
     * @return ProcessorAuthGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorAuthGet(processorAuthGetRequest: ProcessorAuthGetRequest): HttpResponse<ProcessorAuthGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorAuthGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/auth/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve Balance data
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached.
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
     * @return ProcessorBalanceGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorBalanceGet(processorBalanceGetRequest: ProcessorBalanceGetRequest): HttpResponse<ProcessorBalanceGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorBalanceGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/balance/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a bank transfer as a processor
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest
     * @return ProcessorBankTransferCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorBankTransferCreate(processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest): HttpResponse<ProcessorBankTransferCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorBankTransferCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/bank_transfer/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve Identity data
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest
     * @return ProcessorIdentityGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorIdentityGet(processorIdentityGetRequest: ProcessorIdentityGetRequest): HttpResponse<ProcessorIdentityGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorIdentityGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/identity/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create Stripe bank account token
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.
     * @param processorStripeBankAccountTokenCreateRequest
     * @return ProcessorStripeBankAccountTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest): HttpResponse<ProcessorStripeBankAccountTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorStripeBankAccountTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/stripe/bank_account_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
     * @param processorTokenCreateRequest
     * @return ProcessorTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun processorTokenCreate(processorTokenCreateRequest: ProcessorTokenCreateRequest): HttpResponse<ProcessorTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = processorTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/processor/token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Manually fire a Bank Transfer webhook
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest
     * @return SandboxBankTransferFireWebhookResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest): HttpResponse<SandboxBankTransferFireWebhookResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxBankTransferFireWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/bank_transfer/fire_webhook",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest
     * @return SandboxBankTransferSimulateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest): HttpResponse<SandboxBankTransferSimulateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxBankTransferSimulateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/bank_transfer/simulate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Manually fire an Income webhook
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest
     * @return SandboxIncomeFireWebhookResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest): HttpResponse<SandboxIncomeFireWebhookResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxIncomeFireWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/income/fire_webhook",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Fire a test webhook
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest
     * @return SandboxItemFireWebhookResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxItemFireWebhook(sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest): HttpResponse<SandboxItemFireWebhookResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxItemFireWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/item/fire_webhook",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Force a Sandbox Item into an error state
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest
     * @return SandboxItemResetLoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxItemResetLogin(sandboxItemResetLoginRequest: SandboxItemResetLoginRequest): HttpResponse<SandboxItemResetLoginResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxItemResetLoginRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/item/reset_login",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Set verification status for Sandbox account
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest
     * @return SandboxItemSetVerificationStatusResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest): HttpResponse<SandboxItemSetVerificationStatusResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxItemSetVerificationStatusRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/item/set_verification_status",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest
     * @return kotlin.collections.Map<kotlin.String, kotlin.Any>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest): HttpResponse<Map<String, Any>> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxOauthSelectAccountsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/oauth/select_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a test Item and processor token
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest
     * @return SandboxProcessorTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest): HttpResponse<SandboxProcessorTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxProcessorTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/processor_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a test Item
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest
     * @return SandboxPublicTokenCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest): HttpResponse<SandboxPublicTokenCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxPublicTokenCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/public_token/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Manually fire a Transfer webhook
     * Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @param sandboxTransferFireWebhookRequest
     * @return SandboxTransferFireWebhookResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest: SandboxTransferFireWebhookRequest): HttpResponse<SandboxTransferFireWebhookResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxTransferFireWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/transfer/fire_webhook",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Trigger the creation of a repayment
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest
     * @return SandboxTransferRepaymentSimulateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest): HttpResponse<SandboxTransferRepaymentSimulateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxTransferRepaymentSimulateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/transfer/repayment/simulate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Simulate a transfer event in Sandbox
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest
     * @return SandboxTransferSimulateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxTransferSimulate(sandboxTransferSimulateRequest: SandboxTransferSimulateRequest): HttpResponse<SandboxTransferSimulateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxTransferSimulateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/transfer/simulate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Simulate creating a sweep
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest
     * @return SandboxTransferSweepSimulateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest): HttpResponse<SandboxTransferSweepSimulateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = sandboxTransferSweepSimulateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/sandbox/transfer/sweep/simulate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an &#x60;INVALID_REQUEST&#x60; error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest
     * @return SignalDecisionReportResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun signalDecisionReport(signalDecisionReportRequest: SignalDecisionReportRequest): HttpResponse<SignalDecisionReportResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = signalDecisionReportRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/signal/decision/report",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @param signalEvaluateRequest
     * @return SignalEvaluateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun signalEvaluate(signalEvaluateRequest: SignalEvaluateRequest): HttpResponse<SignalEvaluateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = signalEvaluateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/signal/evaluate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Prepare the Signal product before calling &#x60;/signal/evaluate&#x60;
     * Call &#x60;/signal/prepare&#x60; with Plaid-linked bank account information at least 10 seconds before calling &#x60;/signal/evaluate&#x60; or as soon as an end-user enters the ACH deposit flow in your application.
     * @param signalPrepareRequest
     * @return SignalPrepareResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun signalPrepare(signalPrepareRequest: SignalPrepareRequest): HttpResponse<SignalPrepareResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = signalPrepareRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/signal/prepare",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest
     * @return SignalReturnReportResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun signalReturnReport(signalReturnReportRequest: SignalReturnReportRequest): HttpResponse<SignalReturnReportResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = signalReturnReportRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/signal/return/report",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * enhance locally-held transaction data
     * The &#39;/beta/transactions/v1/enhance&#39; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @param transactionsEnhanceGetRequest
     * @return TransactionsEnhanceGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsEnhance(transactionsEnhanceGetRequest: TransactionsEnhanceGetRequest): HttpResponse<TransactionsEnhanceGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsEnhanceGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/beta/transactions/v1/enhance",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get transaction data
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest
     * @return TransactionsGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsGet(transactionsGetRequest: TransactionsGetRequest): HttpResponse<TransactionsGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transactions/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Fetch recurring transaction streams
     * The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is not included by default as part of Transactions. To request access to this endpoint and learn more about pricing, contact your Plaid account manager.  Note that unlike &#x60;/transactions/get&#x60;, &#x60;/transactions/recurring/get&#x60; will not initialize an Item with Transactions. The Item must already have been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;, or after Link, by calling &#x60;/transactions/get&#x60;) before calling this endpoint. Data is available to &#x60;/transactions/recurring/get&#x60; approximately 5 seconds after the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook has fired (about 1-2 minutes after initialization).  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Since recurring streams do not change often, it will typically not be necessary to call this endpoint more than once per day.
     * @param transactionsRecurringGetRequest
     * @return TransactionsRecurringGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsRecurringGet(transactionsRecurringGetRequest: TransactionsRecurringGetRequest): HttpResponse<TransactionsRecurringGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsRecurringGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transactions/recurring/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Refresh transaction data
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60;.  Access to &#x60;/transactions/refresh&#x60; in Production is specific to certain pricing plans. If you cannot access &#x60;/transactions/refresh&#x60; in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @param transactionsRefreshRequest
     * @return TransactionsRefreshResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsRefresh(transactionsRefreshRequest: TransactionsRefreshRequest): HttpResponse<TransactionsRefreshResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsRefreshRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transactions/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create transaction category rule
     * The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRulesCreateRequest
     * @return TransactionsRulesCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsRulesCreate(transactionsRulesCreateRequest: TransactionsRulesCreateRequest): HttpResponse<TransactionsRulesCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsRulesCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/beta/transactions/rules/v1/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Return a list of rules created for the Item associated with the access token.
     * The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
     * @param transactionsRulesListRequest
     * @return TransactionsRulesListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsRulesList(transactionsRulesListRequest: TransactionsRulesListRequest): HttpResponse<TransactionsRulesListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsRulesListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/beta/transactions/rules/v1/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Remove transaction rule
     * The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
     * @param transactionsRulesRemoveRequest
     * @return TransactionsRulesRemoveResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsRulesRemove(transactionsRulesRemoveRequest: TransactionsRulesRemoveRequest): HttpResponse<TransactionsRulesRemoveResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsRulesRemoveRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/beta/transactions/rules/v1/remove",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get incremental transaction updates on an Item
     * This endpoint replaces &#x60;/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  Note that for newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @param transactionsSyncRequest
     * @return TransactionsSyncResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transactionsSync(transactionsSyncRequest: TransactionsSyncRequest): HttpResponse<TransactionsSyncResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transactionsSyncRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transactions/sync",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a transfer authorization
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  For guaranteed ACH customers, the following fields are required : &#x60;user.phone_number&#x60; (optional if &#x60;email_address&#x60; provided), &#x60;user.email_address&#x60; (optional if &#x60;phone_number&#x60; provided), &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60;, and &#x60;user_present&#x60;.
     * @param transferAuthorizationCreateRequest
     * @return TransferAuthorizationCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferAuthorizationCreate(transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest): HttpResponse<TransferAuthorizationCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferAuthorizationCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/authorization/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Cancel a transfer
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest
     * @return TransferCancelResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferCancel(transferCancelRequest: TransferCancelRequest): HttpResponse<TransferCancelResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferCancelRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/cancel",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a transfer
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest
     * @return TransferCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferCreate(transferCreateRequest: TransferCreateRequest): HttpResponse<TransferCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List transfer events
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest
     * @return TransferEventListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferEventList(transferEventListRequest: TransferEventListRequest): HttpResponse<TransferEventListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferEventListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/event/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Sync transfer events
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events.
     * @param transferEventSyncRequest
     * @return TransferEventSyncResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferEventSync(transferEventSyncRequest: TransferEventSyncRequest): HttpResponse<TransferEventSyncResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferEventSyncRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/event/sync",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a transfer
     * The &#x60;/transfer/get&#x60; fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest
     * @return TransferGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferGet(transferGetRequest: TransferGetRequest): HttpResponse<TransferGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest
     * @return TransferIntentCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferIntentCreate(transferIntentCreateRequest: TransferIntentCreateRequest): HttpResponse<TransferIntentCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferIntentCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/intent/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve more information about a transfer intent
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param requestBody
     * @return TransferIntentGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferIntentGet(requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>): HttpResponse<TransferIntentGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = requestBody

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/intent/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List transfers
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers.
     * @param transferListRequest
     * @return TransferListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferList(transferListRequest: TransferListRequest): HttpResponse<TransferListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Migrate account into Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param transferMigrateAccountRequest
     * @return TransferMigrateAccountResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferMigrateAccount(transferMigrateAccountRequest: TransferMigrateAccountRequest): HttpResponse<TransferMigrateAccountResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferMigrateAccountRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/migrate_account",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Lists historical repayments
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest
     * @return TransferRepaymentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferRepaymentList(transferRepaymentListRequest: TransferRepaymentListRequest): HttpResponse<TransferRepaymentListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferRepaymentListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/repayment/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List the returns included in a repayment
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest
     * @return TransferRepaymentReturnListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferRepaymentReturnList(transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest): HttpResponse<TransferRepaymentReturnListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferRepaymentReturnListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/repayment/return/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve a sweep
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest
     * @return TransferSweepGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferSweepGet(transferSweepGetRequest: TransferSweepGetRequest): HttpResponse<TransferSweepGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferSweepGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/sweep/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List sweeps
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest
     * @return TransferSweepListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun transferSweepList(transferSweepListRequest: TransferSweepListRequest): HttpResponse<TransferSweepListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = transferSweepListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/transfer/sweep/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create user
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.
     * @param userCreateRequest
     * @return UserCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun userCreate(userCreateRequest: UserCreateRequest): HttpResponse<UserCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = userCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/user/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create an e-wallet
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @param walletCreateRequest
     * @return WalletCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletCreate(walletCreateRequest: WalletCreateRequest): HttpResponse<WalletCreateResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance.
     * @param walletGetRequest
     * @return WalletGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletGet(walletGetRequest: WalletGetRequest): HttpResponse<WalletGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Fetch a list of e-wallets
     * This endpoint lists all e-wallets in descending order of creation.
     * @param walletListRequest
     * @return WalletListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletList(walletListRequest: WalletListRequest): HttpResponse<WalletListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @param walletTransactionExecuteRequest
     * @return WalletTransactionExecuteResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletTransactionExecute(walletTransactionExecuteRequest: WalletTransactionExecuteRequest): HttpResponse<WalletTransactionExecuteResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletTransactionExecuteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/transaction/execute",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Fetch an e-wallet transaction
     * Fetch a specific e-wallet transaction
     * @param walletTransactionGetRequest
     * @return WalletTransactionGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletTransactionGet(walletTransactionGetRequest: WalletTransactionGetRequest): HttpResponse<WalletTransactionGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletTransactionGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/transaction/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
     * @param walletTransactionsListRequest
     * @return WalletTransactionsListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun walletTransactionsList(walletTransactionsListRequest: WalletTransactionsListRequest): HttpResponse<WalletTransactionsListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = walletTransactionsListRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/wallet/transactions/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a watchlist screening for an entity
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param createEntityScreeningRequest
     * @return EntityWatchlistScreeningResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityCreate(createEntityScreeningRequest: CreateEntityScreeningRequest): HttpResponse<EntityWatchlistScreeningResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = createEntityScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get an entity screening
     * Retrieve an entity watchlist screening.
     * @param getEntityWatchlistScreeningRequest
     * @return EntityWatchlistScreeningResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityGet(getEntityWatchlistScreeningRequest: GetEntityWatchlistScreeningRequest): HttpResponse<EntityWatchlistScreeningResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getEntityWatchlistScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List history for entity watchlist screenings
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param listWatchlistScreeningEntityHistoryRequest
     * @return PaginatedEntityWatchlistScreeningListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityHistoryList(listWatchlistScreeningEntityHistoryRequest: ListWatchlistScreeningEntityHistoryRequest): HttpResponse<PaginatedEntityWatchlistScreeningListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningEntityHistoryRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/history/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List hits for entity watchlist screenings
     * List all hits for the entity watchlist screening.
     * @param listWatchlistScreeningEntityHitRequest
     * @return PaginatedEntityWatchlistScreeningHitListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityHitsList(listWatchlistScreeningEntityHitRequest: ListWatchlistScreeningEntityHitRequest): HttpResponse<PaginatedEntityWatchlistScreeningHitListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningEntityHitRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/hit/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List entity watchlist screenings
     * List all entity screenings.
     * @param listEntityWatchlistScreeningRequest
     * @return PaginatedEntityWatchlistScreeningListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityList(listEntityWatchlistScreeningRequest: ListEntityWatchlistScreeningRequest): HttpResponse<PaginatedEntityWatchlistScreeningListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listEntityWatchlistScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get entity watchlist screening program
     * Get an entity watchlist screening program
     * @param getWatchlistScreeningEntityProgramRequest
     * @return EntityWatchlistProgramResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityProgramGet(getWatchlistScreeningEntityProgramRequest: GetWatchlistScreeningEntityProgramRequest): HttpResponse<EntityWatchlistProgramResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getWatchlistScreeningEntityProgramRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/program/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List entity watchlist screening programs
     * List all entity watchlist screening programs
     * @param listWatchlistScreeningEntityProgramsRequest
     * @return PaginatedEntityWatchlistProgramListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityProgramList(listWatchlistScreeningEntityProgramsRequest: ListWatchlistScreeningEntityProgramsRequest): HttpResponse<PaginatedEntityWatchlistProgramListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningEntityProgramsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/program/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a review for an entity watchlist screening
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param createEntityWatchlistScreeningReviewRequest
     * @return EntityWatchlistScreeningReviewResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityReviewCreate(createEntityWatchlistScreeningReviewRequest: CreateEntityWatchlistScreeningReviewRequest): HttpResponse<EntityWatchlistScreeningReviewResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = createEntityWatchlistScreeningReviewRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/review/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List reviews for entity watchlist screenings
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param listWatchlistScreeningEntityReviewsRequest
     * @return PaginatedEntityWatchlistScreeningReviewListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityReviewList(listWatchlistScreeningEntityReviewsRequest: ListWatchlistScreeningEntityReviewsRequest): HttpResponse<PaginatedEntityWatchlistScreeningReviewListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningEntityReviewsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/review/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update an entity screening
     * Update an entity watchlist screening.
     * @param updateEntityScreeningRequest The entity screening was successfully updated.
     * @return EntityWatchlistScreeningResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningEntityUpdate(updateEntityScreeningRequest: UpdateEntityScreeningRequest): HttpResponse<EntityWatchlistScreeningResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = updateEntityScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/entity/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a watchlist screening for a person
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningCreateRequest
     * @return WatchlistScreeningIndividualResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualCreate(watchlistScreeningCreateRequest: WatchlistScreeningCreateRequest): HttpResponse<WatchlistScreeningIndividualResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = watchlistScreeningCreateRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Retrieve an individual watchlist screening
     * Retrieve a previously created individual watchlist screening
     * @param getIndividualWatchlistScreeningRequest
     * @return WatchlistScreeningIndividualResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualGet(getIndividualWatchlistScreeningRequest: GetIndividualWatchlistScreeningRequest): HttpResponse<WatchlistScreeningIndividualResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getIndividualWatchlistScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List history for individual watchlist screenings
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param listWatchlistScreeningIndividualHistoryRequest
     * @return PaginatedIndividualWatchlistScreeningListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualHistoryList(listWatchlistScreeningIndividualHistoryRequest: ListWatchlistScreeningIndividualHistoryRequest): HttpResponse<PaginatedIndividualWatchlistScreeningListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningIndividualHistoryRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/history/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List hits for individual watchlist screening
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @param listWatchlistScreeningIndividualHitRequest
     * @return PaginatedIndividualWatchlistScreeningHitListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualHitList(listWatchlistScreeningIndividualHitRequest: ListWatchlistScreeningIndividualHitRequest): HttpResponse<PaginatedIndividualWatchlistScreeningHitListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningIndividualHitRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/hit/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List Individual Watchlist Screenings
     * List previously created watchlist screenings for individuals
     * @param listIndividualWatchlistScreeningRequest
     * @return PaginatedIndividualWatchlistScreeningListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualList(listIndividualWatchlistScreeningRequest: ListIndividualWatchlistScreeningRequest): HttpResponse<PaginatedIndividualWatchlistScreeningListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listIndividualWatchlistScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get individual watchlist screening program
     * Get an individual watchlist screening program
     * @param getWatchlistScreeningIndividualProgramRequest
     * @return IndividualWatchlistProgramResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualProgramGet(getWatchlistScreeningIndividualProgramRequest: GetWatchlistScreeningIndividualProgramRequest): HttpResponse<IndividualWatchlistProgramResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = getWatchlistScreeningIndividualProgramRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/program/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List individual watchlist screening programs
     * List all individual watchlist screening programs
     * @param listWatchlistScreeningIndividualProgramsRequest
     * @return PaginatedIndividualWatchlistProgramListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualProgramList(listWatchlistScreeningIndividualProgramsRequest: ListWatchlistScreeningIndividualProgramsRequest): HttpResponse<PaginatedIndividualWatchlistProgramListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningIndividualProgramsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/program/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create a review for an individual watchlist screening
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param createIndividualWatchlistScreeningReviewRequest
     * @return WatchlistScreeningReviewResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualReviewCreate(createIndividualWatchlistScreeningReviewRequest: CreateIndividualWatchlistScreeningReviewRequest): HttpResponse<WatchlistScreeningReviewResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = createIndividualWatchlistScreeningReviewRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/review/create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * List reviews for individual watchlist screenings
     * List all reviews for the individual watchlist screening.
     * @param listWatchlistScreeningIndividualReviewsRequest
     * @return PaginatedIndividualWatchlistScreeningReviewListResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualReviewsList(listWatchlistScreeningIndividualReviewsRequest: ListWatchlistScreeningIndividualReviewsRequest): HttpResponse<PaginatedIndividualWatchlistScreeningReviewListResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = listWatchlistScreeningIndividualReviewsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/review/list",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update individual watchlist screening
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
     * @param updateIndividualScreeningRequest
     * @return WatchlistScreeningIndividualResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun watchlistScreeningIndividualUpdate(updateIndividualScreeningRequest: UpdateIndividualScreeningRequest): HttpResponse<WatchlistScreeningIndividualResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = updateIndividualScreeningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/watchlist_screening/individual/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest
     * @return WebhookVerificationKeyGetResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun webhookVerificationKeyGet(webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest): HttpResponse<WebhookVerificationKeyGetResponse> {

        val localVariableAuthNames = listOf<String>("clientId", "plaidVersion", "secret")

        val localVariableBody = webhookVerificationKeyGetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/webhook_verification_key/get",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
