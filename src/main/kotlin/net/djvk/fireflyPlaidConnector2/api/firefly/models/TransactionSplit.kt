/**
 * Firefly III API v1.5.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.djvk.fireflyPlaidConnector2.api.firefly.models

import com.fasterxml.jackson.annotation.JsonProperty
import net.djvk.fireflyPlaidConnector2.constants.FireflyTransactionSplitId

/**
 *
 *
 * @param type
 * @param date Date of the transaction
 * @param amount Amount of the transaction.
 * @param description Description of the transaction.
 * @param sourceId ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
 * @param destinationId ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
 * @param user User ID
 * @param transactionJournalId ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction.
 * @param order Order of this entry in the list of transactions.
 * @param currencyId Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.
 * @param currencyCode Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.
 * @param currencySymbol
 * @param currencyName
 * @param currencyDecimalPlaces Number of decimals used in this currency.
 * @param foreignCurrencyId Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
 * @param foreignCurrencyCode Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
 * @param foreignCurrencySymbol
 * @param foreignCurrencyDecimalPlaces Number of decimals in the currency
 * @param foreignAmount The amount in a foreign currency.
 * @param sourceName Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
 * @param sourceIban
 * @param sourceType
 * @param destinationName Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
 * @param destinationIban
 * @param destinationType
 * @param budgetId The budget ID for this transaction.
 * @param budgetName The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
 * @param categoryId The category ID for this transaction.
 * @param categoryName The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
 * @param billId Optional. Use either this or the bill_name
 * @param billName Optional. Use either this or the bill_id
 * @param reconciled If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
 * @param notes
 * @param tags Array of tags.
 * @param internalReference Reference to internal reference of other systems.
 * @param externalId Reference to external ID in other systems.
 * @param externalUrl External, custom URL for this transaction.
 * @param originalSource System generated identifier for original creator of transaction.
 * @param recurrenceId Reference to recurrence that made the transaction.
 * @param recurrenceTotal Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.
 * @param recurrenceCount The # of the current transaction created under this recurrence.
 * @param bunqPaymentId Internal ID of bunq transaction. DEPRECATED
 * @param importHashV2 Hash value of original import transaction (for duplicate detection).
 * @param sepaCc SEPA Clearing Code
 * @param sepaCtOp SEPA Opposing Account Identifier
 * @param sepaCtId SEPA end-to-end Identifier
 * @param sepaDb SEPA mandate identifier
 * @param sepaCountry SEPA Country
 * @param sepaEp SEPA External Purpose indicator
 * @param sepaCi SEPA Creditor Identifier
 * @param sepaBatchId SEPA Batch ID
 * @param interestDate
 * @param bookDate
 * @param processDate
 * @param dueDate
 * @param paymentDate
 * @param invoiceDate
 * @param latitude Latitude of the transaction's location, if applicable. Can be used to draw a map.
 * @param longitude Latitude of the transaction's location, if applicable. Can be used to draw a map.
 * @param zoomLevel Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
 * @param hasAttachments If the transaction has attachments.
 */

data class TransactionSplit(
    @field:JsonProperty("type")
    val type: TransactionTypeProperty,

    /* Date of the transaction */
    @field:JsonProperty("date")
    val date: java.time.OffsetDateTime,

    /* Amount of the transaction. */
    @field:JsonProperty("amount")
    val amount: kotlin.String,

    /* Description of the transaction. */
    @field:JsonProperty("description")
    val description: kotlin.String,

    /* ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. */
    @field:JsonProperty("source_id")
    val sourceId: kotlin.String?,

    /* ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account. */
    @field:JsonProperty("destination_id")
    val destinationId: kotlin.String?,

    /* User ID */
    @field:JsonProperty("user")
    val user: kotlin.String? = null,

    /* ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction.  */
    @field:JsonProperty("transaction_journal_id")
    val transactionJournalId: FireflyTransactionSplitId? = null,

    /* Order of this entry in the list of transactions. */
    @field:JsonProperty("order")
    val order: kotlin.Int? = null,

    /* Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code. */
    @field:JsonProperty("currency_id")
    val currencyId: kotlin.String? = null,

    /* Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id. */
    @field:JsonProperty("currency_code")
    val currencyCode: kotlin.String? = null,

    @field:JsonProperty("currency_symbol")
    val currencySymbol: kotlin.String? = null,

    @field:JsonProperty("currency_name")
    val currencyName: kotlin.String? = null,

    /* Number of decimals used in this currency. */
    @field:JsonProperty("currency_decimal_places")
    val currencyDecimalPlaces: kotlin.Int? = null,

    /* Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount. */
    @field:JsonProperty("foreign_currency_id")
    val foreignCurrencyId: kotlin.String? = null,

    /* Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount. */
    @field:JsonProperty("foreign_currency_code")
    val foreignCurrencyCode: kotlin.String? = null,

    @field:JsonProperty("foreign_currency_symbol")
    val foreignCurrencySymbol: kotlin.String? = null,

    /* Number of decimals in the currency */
    @field:JsonProperty("foreign_currency_decimal_places")
    val foreignCurrencyDecimalPlaces: kotlin.Int? = null,

    /* The amount in a foreign currency. */
    @field:JsonProperty("foreign_amount")
    val foreignAmount: kotlin.String? = null,

    /* Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name. */
    @field:JsonProperty("source_name")
    val sourceName: kotlin.String? = null,

    @field:JsonProperty("source_iban")
    val sourceIban: kotlin.String? = null,

    @field:JsonProperty("source_type")
    val sourceType: AccountTypeProperty? = null,

    /* Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough. */
    @field:JsonProperty("destination_name")
    val destinationName: kotlin.String? = null,

    @field:JsonProperty("destination_iban")
    val destinationIban: kotlin.String? = null,

    @field:JsonProperty("destination_type")
    val destinationType: AccountTypeProperty? = null,

    /* The budget ID for this transaction. */
    @field:JsonProperty("budget_id")
    val budgetId: kotlin.String? = null,

    /* The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored. */
    @field:JsonProperty("budget_name")
    val budgetName: kotlin.String? = null,

    /* The category ID for this transaction. */
    @field:JsonProperty("category_id")
    val categoryId: kotlin.String? = null,

    /* The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name. */
    @field:JsonProperty("category_name")
    val categoryName: kotlin.String? = null,

    /* Optional. Use either this or the bill_name */
    @field:JsonProperty("bill_id")
    val billId: kotlin.String? = null,

    /* Optional. Use either this or the bill_id */
    @field:JsonProperty("bill_name")
    val billName: kotlin.String? = null,

    /* If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user. */
    @field:JsonProperty("reconciled")
    val reconciled: kotlin.Boolean? = null,

    @field:JsonProperty("notes")
    val notes: kotlin.String? = null,

    /* Array of tags. */
    @field:JsonProperty("tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    /* Reference to internal reference of other systems. */
    @field:JsonProperty("internal_reference")
    val internalReference: kotlin.String? = null,

    /* Reference to external ID in other systems. */
    @field:JsonProperty("external_id")
    val externalId: kotlin.String? = null,

    /* External, custom URL for this transaction. */
    @field:JsonProperty("external_url")
    val externalUrl: kotlin.String? = null,

    /* System generated identifier for original creator of transaction. */
    @field:JsonProperty("original_source")
    val originalSource: kotlin.String? = null,

    /* Reference to recurrence that made the transaction. */
    @field:JsonProperty("recurrence_id")
    val recurrenceId: kotlin.Int? = null,

    /* Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite. */
    @field:JsonProperty("recurrence_total")
    val recurrenceTotal: kotlin.Int? = null,

    /* The # of the current transaction created under this recurrence. */
    @field:JsonProperty("recurrence_count")
    val recurrenceCount: kotlin.Int? = null,

    /* Internal ID of bunq transaction. DEPRECATED */
    @field:JsonProperty("bunq_payment_id")
    val bunqPaymentId: kotlin.String? = null,

    /* Hash value of original import transaction (for duplicate detection). */
    @field:JsonProperty("import_hash_v2")
    val importHashV2: kotlin.String? = null,

    /* SEPA Clearing Code */
    @field:JsonProperty("sepa_cc")
    val sepaCc: kotlin.String? = null,

    /* SEPA Opposing Account Identifier */
    @field:JsonProperty("sepa_ct_op")
    val sepaCtOp: kotlin.String? = null,

    /* SEPA end-to-end Identifier */
    @field:JsonProperty("sepa_ct_id")
    val sepaCtId: kotlin.String? = null,

    /* SEPA mandate identifier */
    @field:JsonProperty("sepa_db")
    val sepaDb: kotlin.String? = null,

    /* SEPA Country */
    @field:JsonProperty("sepa_country")
    val sepaCountry: kotlin.String? = null,

    /* SEPA External Purpose indicator */
    @field:JsonProperty("sepa_ep")
    val sepaEp: kotlin.String? = null,

    /* SEPA Creditor Identifier */
    @field:JsonProperty("sepa_ci")
    val sepaCi: kotlin.String? = null,

    /* SEPA Batch ID */
    @field:JsonProperty("sepa_batch_id")
    val sepaBatchId: kotlin.String? = null,

    @field:JsonProperty("interest_date")
    val interestDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("book_date")
    val bookDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("process_date")
    val processDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("due_date")
    val dueDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("payment_date")
    val paymentDate: java.time.OffsetDateTime? = null,

    @field:JsonProperty("invoice_date")
    val invoiceDate: java.time.OffsetDateTime? = null,

    /* Latitude of the transaction's location, if applicable. Can be used to draw a map. */
    @field:JsonProperty("latitude")
    val latitude: kotlin.Double? = null,

    /* Latitude of the transaction's location, if applicable. Can be used to draw a map. */
    @field:JsonProperty("longitude")
    val longitude: kotlin.Double? = null,

    /* Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. */
    @field:JsonProperty("zoom_level")
    val zoomLevel: kotlin.Int? = null,

    /* If the transaction has attachments. */
    @field:JsonProperty("has_attachments")
    val hasAttachments: kotlin.Boolean? = null
) {
    fun toTransactionSplitUpdate(): TransactionSplitUpdate {
        return TransactionSplitUpdate(
            date = date,
            amount = amount,
            description = description,
            sourceId = sourceId,
            destinationId = destinationId,
            order = order,
            currencyId = currencyId,
            currencyCode = currencyCode,
            currencySymbol = currencySymbol,
            currencyName = currencyName,
            currencyDecimalPlaces = currencyDecimalPlaces,
            foreignCurrencyId = foreignCurrencyId,
            foreignCurrencyCode = foreignCurrencyCode,
            foreignCurrencySymbol = foreignCurrencySymbol,
            foreignCurrencyDecimalPlaces = foreignCurrencyDecimalPlaces,
            foreignAmount = foreignAmount,
            sourceName = sourceName,
            sourceIban = sourceIban,
            destinationName = destinationName,
            destinationIban = destinationIban,
            budgetId = budgetId,
            budgetName = budgetName,
            categoryId = categoryId,
            categoryName = categoryName,
            billId = billId,
            billName = billName,
            reconciled = reconciled,
            notes = notes,
            tags = tags,
            internalReference = internalReference,
            externalId = externalId,
            externalUrl = externalUrl,
            bunqPaymentId = bunqPaymentId,
            sepaCc = sepaCc,
            sepaCtOp = sepaCtOp,
            sepaCtId = sepaCtId,
            sepaDb = sepaDb,
            sepaCountry = sepaCountry,
            sepaEp = sepaEp,
            sepaCi = sepaCi,
            sepaBatchId = sepaBatchId,
            interestDate = interestDate,
            bookDate = bookDate,
            processDate = processDate,
            dueDate = dueDate,
            paymentDate = paymentDate,
            invoiceDate = invoiceDate
        )
    }
}

